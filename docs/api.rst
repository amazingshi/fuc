..
   This file was automatically generated by docs/create.py.

API
***

Introduction
============

This section describes application programming interface (API) for the fuc package.

Below is the list of submodules available in API:

- **common** : The common submodule is used by other fuc submodules such as pyvcf and pybed. It also provides many day-to-day actions used in the field of bioinformatics.
- **pybam** : The pybam submodule is designed for working with sequence alignment files (SAM/BAM/CRAM). It essentially wraps the `pysam <https://pysam.readthedocs.io/en/latest/api.html>`_ package to allow fast computation and easy manipulation.
- **pybed** : The pybed submodule is designed for working with BED files. It implements :class:`pybed.BedFrame` which stores BED data as :class:`pandas.DataFrame` via the `pyranges <https://github.com/biocore-ntnu/pyranges>`_ package to allow fast computation and easy manipulation. The submodule strictly adheres to the standard `BED specification <https://genome.ucsc.edu/FAQ/FAQformat.html>`_.
- **pycov** : The pycov submodule is designed for working with depth of coverage data from sequence alingment files (SAM/BAM/CRAM). It implements :class:`pycov.CovFrame` which stores read depth data as :class:`pandas.DataFrame` via the `pysam <https://pysam.readthedocs.io/en/latest/api.html>`_ package to allow fast computation and easy manipulation.
- **pyfq** : The pyfq submodule is designed for working with FASTQ files. It implements the :class:`pyfq.FqFrame` which stores FASTQ data as :class:`pandas.DataFrame` to allow fast computation and easy manipulation.
- **pymaf** : The pymaf submodule is designed for working with MAF files. It implements :class:`pymaf.MafFrame` which stores MAF data as :class:`pandas.DataFrame` to allow fast computation and easy manipulation. The class also contains many useful plotting methods such as :meth:`pymaf.MafFrame.plot_varcls` and :meth:`pymaf.MafFrame.plot_waterfall`. The submodule strictly adheres to the standard `MAF specification <https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format/>`_.
- **pysnpeff** : The pysnpeff submodule is designed for parsing VCF annotation data from the `SnpEff <https://pcingola.github.io/SnpEff/>`_ program. It is designed to be used with :class:`pyvcf.VcfFrame`.
- **pyvcf** : The pyvcf submodule is designed for working with VCF files. It implements :class:`pyvcf.VcfFrame` class which stores VCF data as :class:`pandas.DataFrame` to allow fast computation and easy manipulation. The submodule strictly adheres to the standard `VCF specification <https://samtools.github.io/hts-specs/VCFv4.3.pdf>`_.
- **pyvep** : The pyvep submodule is designed for parsing VCF annotation data from the `Ensembl VEP <https://asia.ensembl.org/info/docs/tools/vep/index.html>`_. It is designed to be used with :class:`pyvcf.VcfFrame`.

For getting help on a specific module (e.g. pyvcf):

.. code:: python3

   from fuc import pyvcf
   help(pyvcf)

fuc.api.common
==============

.. automodule:: fuc.api.common
   :members:

fuc.api.pybam
=============

.. automodule:: fuc.api.pybam
   :members:

fuc.api.pybed
=============

.. automodule:: fuc.api.pybed
   :members:

fuc.api.pycov
=============

.. automodule:: fuc.api.pycov
   :members:

fuc.api.pyfq
============

.. automodule:: fuc.api.pyfq
   :members:

fuc.api.pymaf
=============

.. automodule:: fuc.api.pymaf
   :members:

fuc.api.pysnpeff
================

.. automodule:: fuc.api.pysnpeff
   :members:

fuc.api.pyvcf
=============

.. automodule:: fuc.api.pyvcf
   :members:

fuc.api.pyvep
=============

.. automodule:: fuc.api.pyvep
   :members:

