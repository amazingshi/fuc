..
   This file was automatically generated by docs/create.py.

CLI
***

Introduction
============

This section describes command line interface (CLI) for the fuc package.

For getting help on the fuc CLI:

.. code-block:: text

   $ fuc -h
   usage: fuc [-h] [-v] COMMAND ...
   
   positional arguments:
     COMMAND
       bam_head     [BAM] Print the header of a SAM/BAM/CRAM file.
       bam_index    [BAM] Index a SAM/BAM/CRAM file.
       bam_rename   [BAM] Rename the samples in a BAM/CRAM file.
       bam_slice    [BAM] Slice a SAM/BAM/CRAM file.
       bed_intxn    [BED] Find the intersection of two or more BED files.
       bed_sum      [BED] Summarize a BED file.
       fq_count     [FASTQ] Count sequence reads in FASTQ files.
       fq_sum       [FASTQ] Summarize a FASTQ file.
       fuc_compf    [FUC] Compare the contents of two files.
       fuc_demux    [FUC] Parse the Reports directory from bcl2fastq.
       fuc_exist    [FUC] Check whether certain files exist.
       fuc_find     [FUC] Find all files with a certain extension recursively.
       maf_maf2vcf  [MAF] Convert a MAF file to a VCF file.
       maf_oncoplt  [MAF] Create an oncoplot with a MAF file.
       maf_sumplt   [MAF] Create a summary plot with a MAF file.
       maf_vcf2maf  [MAF] Convert a VCF file to a MAF file.
       tbl_merge    [TABLE] Merge two table files.
       tbl_sum      [TABLE] Summarize a table file.
       vcf_filter   [VCF] Filter a VCF file.
       vcf_merge    [VCF] Merge two or more VCF files.
       vcf_rename   [VCF] Rename the samples in a VCF file.
       vcf_slice    [VCF] Slice a VCF file.
       vcf_vcf2bed  [VCF] Convert a VCF file to a BED file.
       vcf_vep      [VCF] Filter a VCF file annotated by Ensemble VEP.
   
   optional arguments:
     -h, --help     Show this help message and exit.
     -v, --version  Show the version number and exit.

For getting help on a specific command (e.g. vcf_merge):

.. code-block:: text

   $ fuc vcf_merge -h

bam_head
========

.. code-block:: text

   $ fuc bam_head -h
   usage: fuc bam_head [-h] bam
   
   This command will print the header of the input SAM/BAM/CRAM file.
   
   usage examples:
     $ fuc bam_head in.sam
     $ fuc bam_head in.bam
     $ fuc bam_head in.cram
   
   positional arguments:
     bam         SAM/BAM/CRAM file.
   
   optional arguments:
     -h, --help  Show this help message and exit.

bam_index
=========

.. code-block:: text

   $ fuc bam_index -h
   usage: fuc bam_index [-h] bam
   
   This command will index the input SAM/BAM/CRAM file.
   
   usage examples:
     $ fuc bam_index in.sam
     $ fuc bam_index in.bam
     $ fuc bam_index in.cram
   
   positional arguments:
     bam         SAM/BAM/CRAM file.
   
   optional arguments:
     -h, --help  Show this help message and exit.

bam_rename
==========

.. code-block:: text

   $ fuc bam_rename -h
   usage: fuc bam_rename [-h] bam name
   
   This command will rename the sample(s) in the input BAM/CRAM file.
   
   usage examples:
     $ fuc bam_rename in.bam NA12878 > out.bam
     $ fuc bam_rename in.cram NA12878 > out.cram
   
   positional arguments:
     bam         BAM/CRAM file.
     name        New sample name.
   
   optional arguments:
     -h, --help  Show this help message and exit.

bam_slice
=========

.. code-block:: text

   $ fuc bam_slice -h
   usage: fuc bam_slice [-h] [--format TEXT] [--fasta PATH]
                        bam region [region ...]
   
   This command will slice the input SAM/BAM/CRAM file for the specified region(s).
   
   usage examples:
     $ fuc bam_slice in.bam chr1:100-200 > out.bam
     $ fuc bam_slice in.bam chr1:100-200 chr2:100-200 > out.bam
     $ fuc bam_slice in.bam chr1:100-200 --format SAM > out.sam
     $ fuc bam_slice in.bam chr1:100-200 --format CRAM --fasta ref.fa > out.cram
   
   positional arguments:
     bam            SAM/BAM/CRAM file.
     region         Space-separated regions ('chrom:start-end').
   
   optional arguments:
     -h, --help     Show this help message and exit.
     --format TEXT  Output format (default: 'BAM') (choices: 'SAM', 'BAM', 'CRAM'). A FASTA file must be specified with '--fasta' for 'CRAM'.
     --fasta PATH   FASTA file. Required when '--format' is 'CRAM'.

bed_intxn
=========

.. code-block:: text

   $ fuc bed_intxn -h
   usage: fuc bed_intxn [-h] bed [bed ...]
   
   This command will compute intersections beween multiple BED files. It
   essentially wraps the 'pybed.BedFrame.intersect' method from the fuc API.
   
   usage examples:
     $ fuc bed_intxn 1.bed 2.bed 3.bed > intersect.bed
   
   positional arguments:
     bed         BED files
   
   optional arguments:
     -h, --help  Show this help message and exit.

bed_sum
=======

.. code-block:: text

   $ fuc bed_sum -h
   usage: fuc bed_sum [-h] [--bases INT] [--decimals INT] bed
   
   This command will compute various summary statstics for a BED file. This
   includes the total numbers of probes and covered base pairs for each
   chromosome.
   
   By default, covered base paris are displayed in bp, but if you prefer you
   can, for example, use '--bases 1000' to display in kb.
   
   usage examples:
     $ fuc bed_sum in.bed
   
   positional arguments:
     bed             BED file
   
   optional arguments:
     -h, --help      Show this help message and exit.
     --bases INT     number to divide covered base pairs (default: 1)
     --decimals INT  number of decimals (default: 0)

fq_count
========

.. code-block:: text

   $ fuc fq_count -h
   usage: fuc fq_count [-h] [fastq ...]
   
   This command will count sequence reads in FASTQ files (both zipped and
   unzipped). It will look for stdin if there are no arguments.
   
   usage examples:
     $ fuc fq_count in.fastq
     $ cat fastq.list | fuc fq_count
   
   positional arguments:
     fastq       FASTQ files (default: stdin)
   
   optional arguments:
     -h, --help  Show this help message and exit.

fq_sum
======

.. code-block:: text

   $ fuc fq_sum -h
   usage: fuc fq_sum [-h] fastq
   
   This command will output a summary of the input FASTQ file (both zipped and
   unqzipped). The summary includes the total number of sequence reads, the
   distribution of read lengths, and the numbers of unique and duplicate
   sequences.
   
   usage examples:
     $ fuc fq_sum in.fastq
   
   positional arguments:
     fastq       FASTQ file
   
   optional arguments:
     -h, --help  Show this help message and exit.

fuc_compf
=========

.. code-block:: text

   $ fuc fuc_compf -h
   usage: fuc fuc_compf [-h] left right
   
   This command will compare the contents of two files. It will return 'True'
   if they are identical and 'False' otherwise. It essentially wraps the
   'filecmp.cmp' method from Python.
   
   usage examples:
     $ fuc fuc_compf left.txt right.txt
   
   positional arguments:
     left        left file
     right       right file
   
   optional arguments:
     -h, --help  Show this help message and exit.

fuc_demux
=========

.. code-block:: text

   $ fuc fuc_demux -h
   usage: fuc fuc_demux [-h] reports_dir output_dir
   
   This command will parse the Reports directory from the bcl2fastq or
   bcl2fastq2 prograrm. In the output directory, the command will create four
   files:
   
   - flowcell_summary.csv
   - lane_summary.csv
   - top_unknown_barcodes.csv
   - reports.pdf
   
   usage examples:
     $ fuc fuc_demux reports_dir output_dir
   
   positional arguments:
     reports_dir  Reports directory
     output_dir   output directory
   
   optional arguments:
     -h, --help   Show this help message and exit.

fuc_exist
=========

.. code-block:: text

   $ fuc fuc_exist -h
   usage: fuc fuc_exist [-h] [files ...]
   
   This command will check whether files exist. It will return
   'True' if they exist and 'False' otherwise. The command will look for stdin
   if there are no arguments.
   
   usage examples:
     $ fuc fuc_exist test.txt
     $ fuc fuc_exist test_dir
     $ cat test.list | fuc fuc_exist
   
   positional arguments:
     files       test files/directories (default: stdin)
   
   optional arguments:
     -h, --help  Show this help message and exit.

fuc_find
========

.. code-block:: text

   $ fuc fuc_find -h
   usage: fuc fuc_find [-h] [--dir PATH] ext
   
   This command will recursively find all files with a certain extension and
   then return their absolute paths.
   
   usage examples:
     $ fuc fuc_find .vcf
     $ fuc fuc_find .vcf.gz
     $ fuc fuc_find .vcf.gz --dir ~/test_dir
   
   positional arguments:
     ext         file extension
   
   optional arguments:
     -h, --help  Show this help message and exit.
     --dir PATH  directory to search in (default: current directory)

maf_maf2vcf
===========

.. code-block:: text

   $ fuc maf_maf2vcf -h
   usage: fuc maf_maf2vcf [-h] [--fasta PATH] [--ignore_indels]
                          [--cols TEXT [TEXT ...]] [--names TEXT [TEXT ...]]
                          maf
   
   This command will convert a MAF file to a VCF file. It essentially wraps the
   'pymaf.MafFrame.to_vcf' method from the fuc API.
   
   In order to handle INDELs the command makes use of a reference assembly
   (i.e. FASTA file). If SNVs are your only concern, then you do not need a
   FASTA file and can just use the '--ignore_indels' flag. If you are going to
   provide a FASTA file, please make sure to select the appropriate one (e.g.
   one that matches the genome assembly). For example, if your MAF file is
   in hg19/GRCh37, use the 'hs37d5.fa' file which can be freely downloaded
   from the 1000 Genomes Project. For more details on the conversion algorithm,
   please visit the 'pymaf.MafFrame.to_vcf' method's documentation page.
   
   In addition to basic genotype calls (e.g. '0/1'), you can extract more
   information from the MAF file by specifying the column(s) that contain
   additional genotype data of interest with the '--cols' argument. If
   provided, this argument will append the requested data to individual
   sample genotypes (e.g. '0/1:0.23'). You can also control how these
   additional genotype information appear in the FORMAT field (e.g. AF) with
   the '--names' argument. If this argument is not provided, the original
   column name(s) will be displayed.
   
   usage examples:
     $ fuc maf_maf2vcf in.maf --fasta hs37d5.fa > out.vcf
     $ fuc maf_maf2vcf in.maf --ignore_indels > out.vcf
     $ fuc maf_maf2vcf in.maf --fasta hs37d5.fa \
         --cols i_TumorVAF_WU --names AF > out.vcf
   
   positional arguments:
     maf                   MAF file
   
   optional arguments:
     -h, --help            Show this help message and exit.
     --fasta PATH          FASTA file (required to include INDELs in the output)
     --ignore_indels       use this flag to exclude INDELs from the output
     --cols TEXT [TEXT ...]
                           column(s) in the MAF file
     --names TEXT [TEXT ...]
                           name(s) to be displayed in the FORMAT field

maf_oncoplt
===========

.. code-block:: text

   $ fuc maf_oncoplt -h
   usage: fuc maf_oncoplt [-h] [--count INT] [--figsize FLOAT FLOAT]
                          [--label_fontsize FLOAT] [--ticklabels_fontsize FLOAT]
                          [--legend_fontsize FLOAT]
                          maf out
   
   This command will create an oncoplot with a MAF file. It essentially wraps
   the 'pymaf.plot_oncoplot' method from the fuc API. Visit the method's
   documentation to see example plots.
   
   The format of output image (PDF/PNG/JPEG/SVG) will be automatically
   determined by the output file's extension.
   
   usage examples:
     $ fuc maf_oncoplt in.maf out.png
     $ fuc maf_oncoplt in.maf out.pdf
   
   positional arguments:
     maf                   MAF file
     out                   image file
   
   optional arguments:
     -h, --help            Show this help message and exit.
     --count INT           number of top mutated genes to display (default: 10)
     --figsize FLOAT FLOAT
                           width, height in inches (default: [15, 10])
     --label_fontsize FLOAT
                           font size of labels (default: 15)
     --ticklabels_fontsize FLOAT
                           font size of tick labels (default: 15)
     --legend_fontsize FLOAT
                           font size of legend texts (default: 15)

maf_sumplt
==========

.. code-block:: text

   $ fuc maf_sumplt -h
   usage: fuc maf_sumplt [-h] [--figsize FLOAT FLOAT] [--title_fontsize FLOAT]
                         [--ticklabels_fontsize FLOAT] [--legend_fontsize FLOAT]
                         maf out
   
   This command will create a summary plot with a MAF file. It essentially wraps
   the 'pymaf.plot_summary' method from the fuc API. Visit the method's
   documentation to see example plots.
   
   The format of output image (PDF/PNG/JPEG/SVG) will be automatically
   determined by the output file's extension.
   
   usage examples:
     $ fuc maf_sumplt in.maf out.png
     $ fuc maf_sumplt in.maf out.pdf
   
   positional arguments:
     maf                   MAF file
     out                   output image file
   
   optional arguments:
     -h, --help            Show this help message and exit.
     --figsize FLOAT FLOAT
                           width, height in inches (default: [15, 10])
     --title_fontsize FLOAT
                           font size of subplot titles (default: 16)
     --ticklabels_fontsize FLOAT
                           font size of tick labels (default: 12)
     --legend_fontsize FLOAT
                           font size of legend texts (default: 12)

maf_vcf2maf
===========

.. code-block:: text

   $ fuc maf_vcf2maf -h
   usage: fuc maf_vcf2maf [-h] vcf
   
   This command will convert an annotated VCF file to a MAF file. It essentially
   wraps the 'pymaf.MafFrame.from_vcf' method from the fuc API.
   
   usage examples:
     $ fuc maf_vcf2maf in.vcf > out.maf
   
   positional arguments:
     vcf         VCF file
   
   optional arguments:
     -h, --help  Show this help message and exit.

tbl_merge
=========

.. code-block:: text

   $ fuc tbl_merge -h
   usage: fuc tbl_merge [-h] [--how TEXT] [--on TEXT [TEXT ...]] [--lsep TEXT]
                        [--rsep TEXT] [--osep TEXT]
                        left right
   
   This command will merge two table files using one or more shared columns.
   It essentially wraps the 'pandas.DataFrame.merge' method from the pandas
   package. For details on the merging algorithms, please visit the method's
   documentation page.
   
   usage examples:
     $ fuc tbl_merge left.tsv right.tsv > merged.tsv
     $ fuc tbl_merge left.csv right.tsv --lsep , > merged.tsv
     $ fuc tbl_merge left.tsv right.tsv --how outer > merged.tsv
   
   positional arguments:
     left                  left file
     right                 right file
   
   optional arguments:
     -h, --help            Show this help message and exit.
     --how TEXT            type of merge to be performed ['left', 'right', 'outer', 'inner', 'cross'] (default: 'inner')
     --on TEXT [TEXT ...]  column names to join on
     --lsep TEXT           delimiter to use for the left file (default: '\t')
     --rsep TEXT           delimiter to use for the right file (default: '\t')
     --osep TEXT           delimiter to use for the output file (default: '\t')

tbl_sum
=======

.. code-block:: text

   $ fuc tbl_sum -h
   usage: fuc tbl_sum [-h] [--sep TEXT] [--skiprows TEXT]
                      [--na_values TEXT [TEXT ...]] [--keep_default_na]
                      [--expr TEXT] [--columns TEXT [TEXT ...]] [--dtypes PATH]
                      table_file
   
   This command will summarize a table file. It essentially wraps the
   'pandas.Series.describe' and 'pandas.Series.value_counts' methods from the
   pandas pacakge.
   
   usage examples:
     $ fuc tbl_sum table.tsv
     $ fuc tbl_sum table.csv --sep ,
   
   positional arguments:
     table_file            table file
   
   optional arguments:
     -h, --help            Show this help message and exit.
     --sep TEXT            delimiter to use (default: '\t')
     --skiprows TEXT       comma-separated line numbers to skip (0-indexed) or number of lines to skip at the start of the file (e.g. `--skiprows 1,` will skip the second line, `--skiprows 2,4` will skip the third and fifth lines, and `--skiprows 10` will skip the first 10 lines)
     --na_values TEXT [TEXT ...]
                           additional strings to recognize as NA/NaN (by default, the following values are interpreted as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan', '1.#IND', '1.#QNAN', '<NA>', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null')
     --keep_default_na     whether or not to include the default NaN values when parsing the data (see 'pandas.read_table' for details)
     --expr TEXT           query the columns of a pandas.DataFrame with a boolean expression (e.g. `--query "A == 'yes'"`)
     --columns TEXT [TEXT ...]
                           columns to be summarized (by default, all columns will be included)
     --dtypes PATH         file of column names and their data types (etheir 'categorical' or 'numeric'); one tab-delimited pair of column name and data type per line

vcf_filter
==========

.. code-block:: text

   $ fuc vcf_filter -h
   usage: fuc vcf_filter [-h] [--expr TEXT] [--samples PATH]
                         [--drop_duplicates [TEXT ...]] [--greedy] [--opposite]
                         [--filter_empty]
                         vcf
   
   This command will filter a VCF file (both zipped and unzipped). It essentially
   wraps multiple methods from the fuc API.
   
   usage examples:
     $ fuc vcf_filter in.vcf --expr 'GT == "0/0"' > out.vcf
     $ fuc vcf_filter in.vcf --expr 'GT != "0/0"' > out.vcf
     $ fuc vcf_filter in.vcf --expr 'DP < 30' > out.vcf
     $ fuc vcf_filter in.vcf --expr 'DP < 30' --greedy > out.vcf
     $ fuc vcf_filter in.vcf --expr 'AD[1] < 10' --greedy > out.vcf
     $ fuc vcf_filter in.vcf --expr 'AD[1] < 10 and DP < 30' --greedy > out.vcf
     $ fuc vcf_filter in.vcf --expr 'AD[1] < 10 or DP < 30' --greedy > out.vcf
     $ fuc vcf_filter in.vcf --expr 'AD[1] < 10 or DP < 30' --opposite > out.vcf
     $ fuc vcf_filter in.vcf --expr 'np.mean(AD) < 10' --greedy --samples sample.list > out.vcf
     $ fuc vcf_filter in.vcf --drop_duplicates CHROM POS REF ALT > out.vcf
     $ fuc vcf_filter in.vcf --filter_empty > out.vcf
   
   positional arguments:
     vcf                   VCF file
   
   optional arguments:
     -h, --help            Show this help message and exit.
     --expr TEXT           expression to evaluate
     --samples PATH        file of sample names to apply the marking (one sample per line)
     --drop_duplicates [TEXT ...]
                           only consider certain columns for identifying duplicates, by default use all of the columns.
     --greedy              use this flag to mark even ambiguous genotypes as missing
     --opposite            use this flag to mark all genotypes that do not satisfy the query expression as missing and leave those that do intact
     --filter_empty        use this flag to remove rows with no genotype calls at all

vcf_merge
=========

.. code-block:: text

   $ fuc vcf_merge -h
   usage: fuc vcf_merge [-h] [--how TEXT] [--format TEXT] [--sort] [--collapse]
                        vcf_files [vcf_files ...]
   
   This command will merge multiple VCF files (both zipped and unzipped). It
   essentially wraps the 'pyvcf.merge' method from the fuc API.
   
   By default, only the GT subfield of the FORMAT field will be included in the
   merged VCF. Use '--format' to include additional FORMAT subfields such as AD
   and DP.
   
   usage examples:
     $ fuc vcf_merge 1.vcf 2.vcf 3.vcf > merged.vcf
   
   positional arguments:
     vcf_files      VCF files
   
   optional arguments:
     -h, --help     Show this help message and exit.
     --how TEXT     type of merge as defined in `pandas.DataFrame.merge` (default: 'inner')
     --format TEXT  FORMAT subfields to be retained (e.g. 'GT:AD:DP') (default: 'GT')
     --sort         use this flag to turn off sorting of records (default: True)
     --collapse     use this flag to collapse duplicate records (default: False)

vcf_rename
==========

.. code-block:: text

   $ fuc vcf_rename -h
   usage: fuc vcf_rename [-h] [--mode TEXT] [--range INT INT] [--sep TEXT]
                         vcf names
   
   This command will rename the samples in a VCF file. It essentially wraps
   the 'pyvcf.VcfFrame.rename' method from the fuc API.
   
   There are three renaming modes: 'MAP', 'INDICIES', and 'RANGE'. The default
   mode is 'MAP' in which case the 'names' file must contain two columns, one
   for the old names and the other for the new names. If the mode is 'INDICIES'
   the first column should be the new names and the second column must be
   0-based indicies of the samples to be renamed. Lastly, in the 'RANGE' mode
   only the first column is required but the 'range' argument must be specified.
   For more details on the renaming modes, please visit the
   'pyvcf.VcfFrame.rename' method's documentation page.
   
   usage examples:
     $ fuc vcf_rename in.vcf old_new.tsv > out.vcf
     $ fuc vcf_rename in.vcf new_idx.tsv --mode INDICIES > out.vcf
     $ fuc vcf_rename in.vcf new_only.tsv --mode RANGE --range 2 5 > out.vcf
     $ fuc vcf_rename in.vcf old_new.csv --sep , > out.vcf
   
   positional arguments:
     vcf              VCF file
     names            delimited text file
   
   optional arguments:
     -h, --help       Show this help message and exit.
     --mode TEXT      renaming mode (default: 'MAP') (choices: 'MAP', 'INDICIES', 'RANGE')
     --range INT INT  specify an index range
     --sep TEXT       delimiter to use (default: '\t')

vcf_slice
=========

.. code-block:: text

   $ fuc vcf_slice -h
   usage: fuc vcf_slice [-h] vcf region
   
   This command will slice a VCF file (both zipped and unzipped). It essentially
   wraps the 'pyvcf.VcfFrame.slice' method from the fuc API.
   
   usage examples:
     $ fuc vcf_slice in.vcf chr1 > sliced.vcf
     $ fuc vcf_slice in.vcf chr1:100-300 > sliced.vcf
     $ fuc vcf_slice in.vcf chr1:100 > sliced.vcf
     $ fuc vcf_slice in.vcf chr1:100- > sliced.vcf
     $ fuc vcf_slice in.vcf chr1:-300 > sliced.vcf
   
   positional arguments:
     vcf         VCF file
     region      region ('chrom:start-end')
   
   optional arguments:
     -h, --help  Show this help message and exit.

vcf_vcf2bed
===========

.. code-block:: text

   $ fuc vcf_vcf2bed -h
   usage: fuc vcf_vcf2bed [-h] vcf
   
   This command will convert a VCF file to a BED file. It essentially wraps the
   'pyvcf.VcfFrame.to_bed' method from the fuc API.
   
   usage examples:
     $ fuc vcf_vcf2bed in.vcf > out.bed
   
   positional arguments:
     vcf         VCF file
   
   optional arguments:
     -h, --help  Show this help message and exit.

vcf_vep
=======

.. code-block:: text

   $ fuc vcf_vep -h
   usage: fuc vcf_vep [-h] [--opposite] [--as_zero] vcf expr
   
   This command will filter a VCF file annotated by Ensemble VEP. It
   essentially wraps the 'pyvep.filter_query' method from the fuc API. For
   details on query expression, please visit the method's documentation page.
   
   usage examples:
     $ fuc vcf_vep in.vcf "SYMBOL == 'TP53'" > out.vcf
     $ fuc vcf_vep in.vcf "SYMBOL != 'TP53'" > out.vcf
     $ fuc vcf_vep in.vcf "SYMBOL == 'TP53'" --opposite > out.vcf
     $ fuc vcf_vep in.vcf "Consequence in ['splice_donor_variant', 'stop_gained']" > out.vcf
     $ fuc vcf_vep in.vcf "(SYMBOL == 'TP53') and (Consequence.str.contains('stop_gained'))" > out.vcf
     $ fuc vcf_vep in.vcf "gnomAD_AF < 0.001" > out.vcf
     $ fuc vcf_vep in.vcf "gnomAD_AF < 0.001" --as_zero > out.vcf
   
   positional arguments:
     vcf         VCF file annotated with Ensemble VEP
     expr        query expression to evaluate
   
   optional arguments:
     -h, --help  Show this help message and exit.
     --opposite  use this flag to return records that don’t meet the said criteria
     --as_zero   use this flag to treat missing values as zero instead of NaN

