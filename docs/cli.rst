..
   This file was automatically generated by docs/create.py.

CLI
***

Introduction
============

This section describes command line interface (CLI) for the fuc package.

For getting help on the fuc CLI:

.. code-block:: text

   $ fuc -h
   usage: fuc [-h] [-v] COMMAND ...
   
   positional arguments:
     COMMAND
       bam-depth    Compute read depth from SAM/BAM/CRAM files.
       bam-head     Print the header of a SAM/BAM/CRAM file.
       bam-index    Index a SAM/BAM/CRAM file.
       bam-rename   Rename the samples in a SAM/BAM/CRAM file.
       bam-slice    Slice a SAM/BAM/CRAM file.
       bed-intxn    Find the intersection of two or more BED files.
       bed-sum      Summarize a BED file.
       fq-count     Count sequence reads in FASTQ files.
       fq-sum       Summarize a FASTQ file.
       fuc-undetm   Compute top unknown barcodes using undertermined FASTQ from bcl2fastq.
       fuc-compf    Compare the contents of two files.
       fuc-demux    Parse the Reports directory from bcl2fastq.
       fuc-exist    Check whether certain files exist.
       fuc-find     Find all filenames matching a specified pattern recursively.
       maf-maf2vcf  Convert a MAF file to a VCF file.
       maf-oncoplt  Create an oncoplot with a MAF file.
       maf-sumplt   Create a summary plot with a MAF file.
       maf-vcf2maf  Convert a VCF file to a MAF file.
       tbl-merge    Merge two table files.
       tbl-sum      Summarize a table file.
       vcf-filter   Filter a VCF file.
       vcf-merge    Merge two or more VCF files.
       vcf-rename   Rename the samples in a VCF file.
       vcf-slice    Slice a VCF file.
       vcf-vcf2bed  Convert a VCF file to a BED file.
       vcf-vep      Filter a VCF file annotated by Ensembl VEP.
   
   optional arguments:
     -h, --help     Show this help message and exit.
     -v, --version  Show the version number and exit.

For getting help on a specific command (e.g. vcf-merge):

.. code-block:: text

   $ fuc vcf-merge -h

bam-depth
=========

.. code-block:: text

   $ fuc bam-depth -h
   usage: fuc bam-depth [-h] [--bam PATH [PATH ...]] [--fn PATH] [--bed PATH]
                        [--region TEXT]
   
   This command will compute read depth from the input SAM/BAM/CRAM files.
   
   Either the '--bam' or '--fn' argument must be provided, but not both.
   
   Usage examples:
     $ fuc bam-depth --bam 1.bam 2.bam --bed in.bed > out.tsv
     $ fuc bam-depth --fn bam.list --region chr1:100-200 > out.tsv
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --bam PATH [PATH ...]
                           One or more input files.
     --fn PATH             File containing one input filename per line.
     --bed PATH            BED file.
     --region TEXT         Only report depth in specified region ('chrom:start-end').

bam-head
========

.. code-block:: text

   $ fuc bam-head -h
   usage: fuc bam-head [-h] bam
   
   This command will print the header of the input SAM/BAM/CRAM file.
   
   Usage examples:
     $ fuc bam-head in.sam
     $ fuc bam-head in.bam
     $ fuc bam-head in.cram
   
   Positional arguments:
     bam         SAM/BAM/CRAM file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

bam-index
=========

.. code-block:: text

   $ fuc bam-index -h
   usage: fuc bam-index [-h] bam
   
   This command will index the input SAM/BAM/CRAM file.
   
   Usage examples:
     $ fuc bam-index in.sam
     $ fuc bam-index in.bam
     $ fuc bam-index in.cram
   
   Positional arguments:
     bam         SAM/BAM/CRAM file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

bam-rename
==========

.. code-block:: text

   $ fuc bam-rename -h
   usage: fuc bam-rename [-h] bam name
   
   This command will rename the sample(s) in the input SAM/BAM/CRAM file.
   
   Usage examples:
     $ fuc bam-rename in.sam NA12878 > out.sam
     $ fuc bam-rename in.bam NA12878 > out.bam
     $ fuc bam-rename in.cram NA12878 > out.cram
   
   Positional arguments:
     bam         SAM/BAM/CRAM file.
     name        New sample name.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

bam-slice
=========

.. code-block:: text

   $ fuc bam-slice -h
   usage: fuc bam-slice [-h] [--format TEXT] [--fasta PATH]
                        bam region [region ...]
   
   This command will slice the input SAM/BAM/CRAM file for the specified region(s).
   
   Usage examples:
     $ fuc bam-slice in.bam chr1:100-200 > out.bam
     $ fuc bam-slice in.bam chr1:100-200 chr2:100-200 > out.bam
     $ fuc bam-slice in.bam chr1:100-200 --format SAM > out.sam
     $ fuc bam-slice in.bam chr1:100-200 --format CRAM --fasta ref.fa > out.cram
   
   Positional arguments:
     bam            SAM/BAM/CRAM file.
     region         Space-separated regions ('chrom:start-end').
   
   Optional arguments:
     -h, --help     Show this help message and exit.
     --format TEXT  Output format (default: 'BAM') (choices: 'SAM', 'BAM', 'CRAM'). A FASTA file must be specified with '--fasta' for 'CRAM'.
     --fasta PATH   FASTA file. Required when '--format' is 'CRAM'.

bed-intxn
=========

.. code-block:: text

   $ fuc bed-intxn -h
   usage: fuc bed-intxn [-h] bed [bed ...]
   
   This command will compute the intersection beween multiple BED files.
   
   Usage examples:
     $ fuc bed-intxn 1.bed 2.bed 3.bed > intersect.bed
   
   Positional arguments:
     bed         BED files.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

bed-sum
=======

.. code-block:: text

   $ fuc bed-sum -h
   usage: fuc bed-sum [-h] [--bases INT] [--decimals INT] bed
   
   This command will compute various summary statstics for a BED file.
   
   The returned statistics include the total numbers of probes and covered base pairs for each chromosome.
   
   By default, covered base paris are displayed in bp, but if you prefer you can, for example, use '--bases 1000' to display in kb.
   
   Usage examples:
     $ fuc bed-sum in.bed
   
   Positional arguments:
     bed             BED file.
   
   Optional arguments:
     -h, --help      Show this help message and exit.
     --bases INT     Number to divide covered base pairs (default: 1).
     --decimals INT  Number of decimals (default: 0).

fq-count
========

.. code-block:: text

   $ fuc fq-count -h
   usage: fuc fq-count [-h] [fastq ...]
   
   This command will count sequence reads in FASTQ files.
   
   It will look for stdin if there are no arguments.
   
   Usage examples:
     $ fuc fq-count in.fastq
     $ cat fastq.list | fuc fq-count
   
   Positional arguments:
     fastq       FASTQ files (zipped or unzipped) (default: stdin).
   
   Optional arguments:
     -h, --help  Show this help message and exit.

fq-sum
======

.. code-block:: text

   $ fuc fq-sum -h
   usage: fuc fq-sum [-h] fastq
   
   This command will output a summary of the input FASTQ file (both zipped and unqzipped).
   
   The summary includes the total number of sequence reads, the distribution of read lengths, and the numbers of unique and duplicate sequences.
   
   Usage examples:
     $ fuc fq-sum in.fastq
   
   Positional arguments:
     fastq       FASTQ file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

fuc-undetm
==========

.. code-block:: text

   $ fuc fuc-undetm -h
   usage: fuc fuc-undetm [-h] [--count INT] fastq
   
   This command will compute top unknown barcodes using undertermined FASTQ from the bcl2fastq or bcl2fastq2 prograrm.
   
   Usage examples:
     $ fuc fuc-undetm Undetermined_S0_R1_001.fastq.gz
   
   Positional arguments:
     fastq        Undertermined FASTQ (zipped or unzipped).
   
   Optional arguments:
     -h, --help   Show this help message and exit.
     --count INT  Number of top unknown barcodes to return (default: 30).

fuc-compf
=========

.. code-block:: text

   $ fuc fuc-compf -h
   usage: fuc fuc-compf [-h] left right
   
   This command will compare the contents of two files, returning 'True' if they are identical and 'False' otherwise.
   
   Usage examples:
     $ fuc fuc-compf left.txt right.txt
   
   Positional arguments:
     left        Left file.
     right       Right file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

fuc-demux
=========

.. code-block:: text

   $ fuc fuc-demux -h
   usage: fuc fuc-demux [-h] [--sheet PATH] reports output
   
   This command will parse the Reports directory from the bcl2fastq or bcl2fastq2 prograrm.
   
   After creating the output directory, the command will write the following files:
     - flowcell_summary.csv
     - lane_summary.csv
     - top_unknown_barcodes.csv
     - reports.pdf
   
   Usage examples:
     $ fuc fuc-demux reports_dir output_dir
   
   Positional arguments:
     reports       Reports directory.
     output        Output directory (will be created).
   
   Optional arguments:
     -h, --help    Show this help message and exit.
     --sheet PATH  SampleSheet.csv file. When provided, samples in the lane_summary.csv file will be sorted in the same order as in the SampleSheet.csv file.

fuc-exist
=========

.. code-block:: text

   $ fuc fuc-exist -h
   usage: fuc fuc-exist [-h] [files ...]
   
   This command will check whether or not specified files including directoires exist, returning 'True' if they exist and 'False' otherwise.
   
   The command will look for stdin if there are no arguments.
   
   Usage examples:
     $ fuc fuc-exist test.txt
     $ fuc fuc-exist test_dir
     $ cat test.list | fuc fuc-exist
   
   Positional arguments:
     files       Files and directories to be tested (default: stdin).
   
   Optional arguments:
     -h, --help  Show this help message and exit.

fuc-find
========

.. code-block:: text

   $ fuc fuc-find -h
   usage: fuc fuc-find [-h] [--dir PATH] pattern
   
   This command will recursively find all the filenames matching a specified pattern and then return their absolute paths.
   
   Usage examples:
     $ fuc fuc-find "*.vcf"
     $ fuc fuc-find "*.vcf.*"
     $ fuc fuc-find "*.vcf.gz" --dir ~/test_dir
   
   Positional arguments:
     pattern     Filename pattern.
   
   Optional arguments:
     -h, --help  Show this help message and exit.
     --dir PATH  Directory to search in (default: current directory).

maf-maf2vcf
===========

.. code-block:: text

   $ fuc maf-maf2vcf -h
   usage: fuc maf-maf2vcf [-h] [--fasta PATH] [--ignore_indels]
                          [--cols TEXT [TEXT ...]] [--names TEXT [TEXT ...]]
                          maf
   
   This command will convert a MAF file to a sorted VCF file.
   
   In order to handle INDELs the command makes use of a reference assembly (i.e. FASTA file). If SNVs are your only concern, then you do not need a FASTA file and can just use the '--ignore_indels' flag.
   
   If you are going to provide a FASTA file, please make sure to select the appropriate one (e.g. one that matches the genome assembly).
   
   In addition to basic genotype calls (e.g. '0/1'), you can extract more information from the MAF file by specifying the column(s) that contain additional genotype data of interest with the '--cols' argument. If provided, this argument will append the requested data to individual sample genotypes (e.g. '0/1:0.23').
   
   You can also control how these additional genotype information appear in the FORMAT field (e.g. AF) with the '--names' argument. If this argument is not provided, the original column name(s) will be displayed.
   
   Usage examples:
     $ fuc maf-maf2vcf in.maf --fasta hs37d5.fa > out.vcf
     $ fuc maf-maf2vcf in.maf --ignore_indels > out.vcf
     $ fuc maf-maf2vcf in.maf --fasta hs37d5.fa --cols i_TumorVAF_WU --names AF > out.vcf
   
   Positional arguments:
     maf                   MAF file (zipped or unzipped).
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --fasta PATH          FASTA file (required to include INDELs in the output).
     --ignore_indels       Use this flag to exclude INDELs from the output.
     --cols TEXT [TEXT ...]
                           Column(s) in the MAF file.
     --names TEXT [TEXT ...]
                           Name(s) to be displayed in the FORMAT field.

maf-oncoplt
===========

.. code-block:: text

   $ fuc maf-oncoplt -h
   usage: fuc maf-oncoplt [-h] [--count INT] [--figsize FLOAT FLOAT]
                          [--label_fontsize FLOAT] [--ticklabels_fontsize FLOAT]
                          [--legend_fontsize FLOAT]
                          maf out
   
   This command will create an oncoplot with a MAF file.
   
   The format of output image (PDF/PNG/JPEG/SVG) will be automatically determined by the output file's extension.
   
   Usage examples:
     $ fuc maf-oncoplt in.maf out.png
     $ fuc maf-oncoplt in.maf out.pdf
   
   Positional arguments:
     maf                   MAF file.
     out                   Output image file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --count INT           Number of top mutated genes to display (default: 10).
     --figsize FLOAT FLOAT
                           Width, height in inches (default: [15, 10]).
     --label_fontsize FLOAT
                           Font size of labels (default: 15).
     --ticklabels_fontsize FLOAT
                           Font size of tick labels (default: 15).
     --legend_fontsize FLOAT
                           Font size of legend texts (default: 15).

maf-sumplt
==========

.. code-block:: text

   $ fuc maf-sumplt -h
   usage: fuc maf-sumplt [-h] [--figsize FLOAT FLOAT] [--title_fontsize FLOAT]
                         [--ticklabels_fontsize FLOAT] [--legend_fontsize FLOAT]
                         maf out
   
   This command will create a summary plot with a MAF file.
   
   The format of output image (PDF/PNG/JPEG/SVG) will be automatically determined by the output file's extension.
   
   Usage examples:
     $ fuc maf-sumplt in.maf out.png
     $ fuc maf-sumplt in.maf out.pdf
   
   Positional arguments:
     maf                   MAF file.
     out                   Output image file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --figsize FLOAT FLOAT
                           width, height in inches (default: [15, 10])
     --title_fontsize FLOAT
                           font size of subplot titles (default: 16)
     --ticklabels_fontsize FLOAT
                           font size of tick labels (default: 12)
     --legend_fontsize FLOAT
                           font size of legend texts (default: 12)

maf-vcf2maf
===========

.. code-block:: text

   $ fuc maf-vcf2maf -h
   usage: fuc maf-vcf2maf [-h] vcf
   
   This command will convert an annotated VCF file to a MAF file.
   
   Usage examples:
     $ fuc maf-vcf2maf in.vcf > out.maf
   
   Positional arguments:
     vcf         VCF file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

tbl-merge
=========

.. code-block:: text

   $ fuc tbl-merge -h
   usage: fuc tbl-merge [-h] [--how TEXT] [--on TEXT [TEXT ...]] [--lsep TEXT]
                        [--rsep TEXT] [--osep TEXT]
                        left right
   
   This command will merge two table files using one or more shared columns.
   
   The command essentially wraps the 'pandas.DataFrame.merge' method from the pandas package. For details on the merging algorithms, please visit the method's documentation page.
   
   Usage examples:
     $ fuc tbl-merge left.tsv right.tsv > merged.tsv
     $ fuc tbl-merge left.csv right.tsv --lsep , > merged.tsv
     $ fuc tbl-merge left.tsv right.tsv --how outer > merged.tsv
   
   Positional arguments:
     left                  Left file.
     right                 Right file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --how TEXT            Type of merge to be performed ['left', 'right', 'outer', 'inner', 'cross'] (default: 'inner').
     --on TEXT [TEXT ...]  Column names to join on.
     --lsep TEXT           Delimiter to use for the left file (default: '\t').
     --rsep TEXT           Delimiter to use for the right file (default: '\t').
     --osep TEXT           Delimiter to use for the output file (default: '\t').

tbl-sum
=======

.. code-block:: text

   $ fuc tbl-sum -h
   usage: fuc tbl-sum [-h] [--sep TEXT] [--skiprows TEXT]
                      [--na_values TEXT [TEXT ...]] [--keep_default_na]
                      [--expr TEXT] [--columns TEXT [TEXT ...]] [--dtypes PATH]
                      table_file
   
   This command will summarize a table file. It essentially wraps the
   'pandas.Series.describe' and 'pandas.Series.value_counts' methods from the
   pandas pacakge.
   
   Usage examples:
     $ fuc tbl-sum table.tsv
     $ fuc tbl-sum table.csv --sep ,
   
   Positional arguments:
     table_file            Table file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --sep TEXT            Delimiter to use (default: '\t').
     --skiprows TEXT       Comma-separated line numbers to skip (0-indexed) or number of lines to skip at the start of the file (e.g. `--skiprows 1,` will skip the second line, `--skiprows 2,4` will skip the third and fifth lines, and `--skiprows 10` will skip the first 10 lines).
     --na_values TEXT [TEXT ...]
                           Additional strings to recognize as NA/NaN (by default, the following values are interpreted as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan', '1.#IND', '1.#QNAN', '<NA>', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null').
     --keep_default_na     Wwhether or not to include the default NaN values when parsing the data (see 'pandas.read_table' for details).
     --expr TEXT           Query the columns of a pandas.DataFrame with a boolean expression (e.g. `--query "A == 'yes'"`).
     --columns TEXT [TEXT ...]
                           Columns to be summarized (by default, all columns will be included).
     --dtypes PATH         File of column names and their data types (etheir 'categorical' or 'numeric'); one tab-delimited pair of column name and data type per line.

vcf-filter
==========

.. code-block:: text

   $ fuc vcf-filter -h
   usage: fuc vcf-filter [-h] [--expr TEXT] [--samples PATH]
                         [--drop_duplicates [TEXT ...]] [--greedy] [--opposite]
                         [--filter_empty]
                         vcf
   
   This command will filter a VCF file (both zipped and unzipped).
   
   Usage examples:
     $ fuc vcf-filter in.vcf --expr 'GT == "0/0"' > out.vcf
     $ fuc vcf-filter in.vcf --expr 'GT != "0/0"' > out.vcf
     $ fuc vcf-filter in.vcf --expr 'DP < 30' > out.vcf
     $ fuc vcf-filter in.vcf --expr 'DP < 30' --greedy > out.vcf
     $ fuc vcf-filter in.vcf --expr 'AD[1] < 10' --greedy > out.vcf
     $ fuc vcf-filter in.vcf --expr 'AD[1] < 10 and DP < 30' --greedy > out.vcf
     $ fuc vcf-filter in.vcf --expr 'AD[1] < 10 or DP < 30' --greedy > out.vcf
     $ fuc vcf-filter in.vcf --expr 'AD[1] < 10 or DP < 30' --opposite > out.vcf
     $ fuc vcf-filter in.vcf --expr 'np.mean(AD) < 10' --greedy --samples sample.list > out.vcf
     $ fuc vcf-filter in.vcf --drop_duplicates CHROM POS REF ALT > out.vcf
     $ fuc vcf-filter in.vcf --filter_empty > out.vcf
   
   Positional arguments:
     vcf                   VCF file
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --expr TEXT           Expression to evaluate.
     --samples PATH        File of sample names to apply the marking (one sample per line).
     --drop_duplicates [TEXT ...]
                           Only consider certain columns for identifying duplicates, by default use all of the columns.
     --greedy              Use this flag to mark even ambiguous genotypes as missing.
     --opposite            Use this flag to mark all genotypes that do not satisfy the query expression as missing and leave those that do intact.
     --filter_empty        Use this flag to remove rows with no genotype calls at all.

vcf-merge
=========

.. code-block:: text

   $ fuc vcf-merge -h
   usage: fuc vcf-merge [-h] [--how TEXT] [--format TEXT] [--sort] [--collapse]
                        vcf_files [vcf_files ...]
   
   This command will merge multiple VCF files.
   
   Usage examples:
     $ fuc vcf-merge 1.vcf 2.vcf 3.vcf > merged.vcf
     $ fuc vcf-merge 1.vcf 2.vcf --format GT:AD:DP > merged.vcf
   
   Positional arguments:
     vcf_files      VCF files (zipped or unzipped).
   
   Optional arguments:
     -h, --help     Show this help message and exit.
     --how TEXT     Type of merge as defined in `pandas.DataFrame.merge` (default: 'inner').
     --format TEXT  FORMAT subfields to be retained (e.g. 'GT:AD:DP') (default: 'GT').
     --sort         Use this flag to turn off sorting of records (default: True).
     --collapse     Use this flag to collapse duplicate records (default: False).

vcf-rename
==========

.. code-block:: text

   $ fuc vcf-rename -h
   usage: fuc vcf-rename [-h] [--mode TEXT] [--range INT INT] [--sep TEXT]
                         vcf names
   
   This command will rename the samples in a VCF file.
   
   There are three renaming modes: 'MAP', 'INDICIES', and 'RANGE'. The default
   mode is 'MAP' in which case the 'names' file must contain two columns, one
   for the old names and the other for the new names. If the mode is 'INDICIES'
   the first column should be the new names and the second column must be
   0-based indicies of the samples to be renamed. Lastly, in the 'RANGE' mode
   only the first column is required but the 'range' argument must be specified.
   For more details on the renaming modes, please visit the
   'pyvcf.VcfFrame.rename' method's documentation page.
   
   Usage examples:
     $ fuc vcf-rename in.vcf old_new.tsv > out.vcf
     $ fuc vcf-rename in.vcf new_idx.tsv --mode INDICIES > out.vcf
     $ fuc vcf-rename in.vcf new_only.tsv --mode RANGE --range 2 5 > out.vcf
     $ fuc vcf-rename in.vcf old_new.csv --sep , > out.vcf
   
   Positional arguments:
     vcf              VCF file
     names            delimited text file
   
   Optional arguments:
     -h, --help       Show this help message and exit.
     --mode TEXT      renaming mode (default: 'MAP') (choices: 'MAP', 'INDICIES', 'RANGE')
     --range INT INT  specify an index range
     --sep TEXT       delimiter to use (default: '\t')

vcf-slice
=========

.. code-block:: text

   $ fuc vcf-slice -h
   usage: fuc vcf-slice [-h] vcf region
   
   This command will slice a VCF file (both zipped and unzipped).
   
   Usage examples:
     $ fuc vcf-slice in.vcf chr1 > sliced.vcf
     $ fuc vcf-slice in.vcf chr1:100-300 > sliced.vcf
     $ fuc vcf-slice in.vcf chr1:100 > sliced.vcf
     $ fuc vcf-slice in.vcf chr1:100- > sliced.vcf
     $ fuc vcf-slice in.vcf chr1:-300 > sliced.vcf
   
   Positional arguments:
     vcf         VCF file.
     region      Region ('chrom:start-end').
   
   Optional arguments:
     -h, --help  Show this help message and exit.

vcf-vcf2bed
===========

.. code-block:: text

   $ fuc vcf-vcf2bed -h
   usage: fuc vcf-vcf2bed [-h] vcf
   
   This command will convert a VCF file to a BED file.
   
   Usage examples:
     $ fuc vcf-vcf2bed in.vcf > out.bed
   
   Positional arguments:
     vcf         VCF file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

vcf-vep
=======

.. code-block:: text

   $ fuc vcf-vep -h
   usage: fuc vcf-vep [-h] [--opposite] [--as_zero] vcf expr
   
   This command will filter a VCF file annotated by Ensembl VEP.
   
   Usage examples:
     $ fuc vcf-vep in.vcf "SYMBOL == 'TP53'" > out.vcf
     $ fuc vcf-vep in.vcf "SYMBOL != 'TP53'" > out.vcf
     $ fuc vcf-vep in.vcf "SYMBOL == 'TP53'" --opposite > out.vcf
     $ fuc vcf-vep in.vcf "Consequence in ['splice_donor_variant', 'stop_gained']" > out.vcf
     $ fuc vcf-vep in.vcf "(SYMBOL == 'TP53') and (Consequence.str.contains('stop_gained'))" > out.vcf
     $ fuc vcf-vep in.vcf "gnomAD_AF < 0.001" > out.vcf
     $ fuc vcf-vep in.vcf "gnomAD_AF < 0.001" --as_zero > out.vcf
   
   Positional arguments:
     vcf         VCF file annotated by Ensembl VEP.
     expr        Query expression to evaluate.
   
   Optional arguments:
     -h, --help  Show this help message and exit.
     --opposite  Use this flag to return only records that don't meet the said criteria.
     --as_zero   Use this flag to treat missing values as zero instead of NaN.

