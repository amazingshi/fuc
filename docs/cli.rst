..
   This file was automatically generated by docs/create.py.

CLI
***

Introduction
============

This section describes command line interface (CLI) for the fuc package.

For getting help on CLI:

.. code-block:: console

   $ fuc -h
   usage: fuc [-h] [-v] COMMAND ...
   
   positional arguments:
     COMMAND        name of the command
       bam_head     [BAM] print the header of a BAM file
       bam_index    [BAM] index a BAM file
       bam_rename   [BAM] add a new sample name to a BAM file
       bam_slice    [BAM] slice a BAM file
       bed_intxn    [BED] find intersection of two or more BED files
       bed_sum      [BED] summarize a BED file
       fq_count     [FASTQ] count sequence reads in FASTQ files
       fq_sum       [FASTQ] summarize a FASTQ file
       fuc_compf    [FUC] compare contents of two files
       fuc_demux    [FUC] parse Reports directory from bcl2fastq or bcl2fastq2
       fuc_exist    [FUC] check whether files/dirs exist
       fuc_find     [FUC] find files with certain extension recursively
       maf_maf2vcf  [MAF] convert a MAF file to a VCF file
       maf_oncoplt  [MAF] create an oncoplot from a MAF file
       maf_sumplt   [MAF] create a summary plot for a MAF file
       maf_vcf2maf  [MAF] convert an annotated VCF file to a MAF file
       tbl_merge    [TABLE] merge two table files
       tbl_sum      [TABLE] summarize a table file
       vcf_merge    [VCF] merge two or more VCF files
       vcf_slice    [VCF] slice a VCF file
       vcf_vcf2bed  [VCF] convert a VCF file to a BED file
       vcf_vep      [VCF] filter a VCF file annotated by Ensemble VEP
   
   optional arguments:
     -h, --help     show this help message and exit
     -v, --version  show the version number and exit

For getting help on a specific command (e.g. vcf_merge):

.. code-block:: console

   $ fuc vcf_merge -h

bam_head
========

.. code-block:: console

   $ fuc bam_head -h
   usage: fuc bam_head [-h] bam_file
   
   This command will print the header of a BAM file.
   
   positional arguments:
     bam_file    BAM file
   
   optional arguments:
     -h, --help  show this help message and exit

bam_index
=========

.. code-block:: console

   $ fuc bam_index -h
   usage: fuc bam_index [-h] bam_file
   
   This command will index a BAM file.
   
   positional arguments:
     bam_file    BAM file
   
   optional arguments:
     -h, --help  show this help message and exit

bam_rename
==========

.. code-block:: console

   $ fuc bam_rename -h
   usage: fuc bam_rename [-h] input_bam name output_bam
   
   This command will add a new sample name to a BAM file.
   
   positional arguments:
     input_bam   input BAM file
     name        sample name
     output_bam  output BAM file
   
   optional arguments:
     -h, --help  show this help message and exit

bam_slice
=========

.. code-block:: console

   $ fuc bam_slice -h
   usage: fuc bam_slice [-h] [--no_index] input_bam region output_bam
   
   This command will slice a BAM file. By default, the command will create a
   accompanying index file (.bai) for the output BAM file.
   
   positional arguments:
     input_bam   input BAM file
     region      target region
     output_bam  output BAM file
   
   optional arguments:
     -h, --help  show this help message and exit
     --no_index  use this flag to skip indexing

bed_intxn
=========

.. code-block:: console

   $ fuc bed_intxn -h
   usage: fuc bed_intxn [-h] bed_files [bed_files ...]
   
   This command will compute intersections beween multiple BED files. It
   essentially wraps the `pyranges.PyRanges.intersect` method.
   
   positional arguments:
     bed_files   BED files
   
   optional arguments:
     -h, --help  show this help message and exit

bed_sum
=======

.. code-block:: console

   $ fuc bed_sum -h
   usage: fuc bed_sum [-h] [--bases INTEGER] [--decimals INTEGER] bed_file
   
   This command will compute summary statstics of the BED file. This includes the
   total numbers of probes and covered base pairs for each chromosome. By
   default, covered base paris are displayed in bp, but if you prefer you can,
   for example, use '--bases 1000' to display base pairs in kb.
   
   positional arguments:
     bed_file            input BED file
   
   optional arguments:
     -h, --help          show this help message and exit
     --bases INTEGER     number used to divide the bases (default: 1)
     --decimals INTEGER  maximum number of decimals (default: 0)

fq_count
========

.. code-block:: console

   $ fuc fq_count -h
   usage: fuc fq_count [-h] [paths ...]
   
   This command will count sequence reads in FASTQ files (both zipped and
   unzipped). It will look for stdin if there are no arguments (e.g. $ cat
   files.list | fuc fq_count).
   
   positional arguments:
     paths       FASTQ file paths (default: stdin)
   
   optional arguments:
     -h, --help  show this help message and exit

fq_sum
======

.. code-block:: console

   $ fuc fq_sum -h
   usage: fuc fq_sum [-h] fastq_file
   
   This command will output a summary of the input FASTQ file (both zipped and
   unqzipped). The summary includes the total number of sequence reads, the
   distribution of read lengths, and the numbers of unique and duplicate
   sequences.
   
   positional arguments:
     fastq_file  input FASTQ file
   
   optional arguments:
     -h, --help  show this help message and exit

fuc_compf
=========

.. code-block:: console

   $ fuc fuc_compf -h
   usage: fuc fuc_compf [-h] file1 file2
   
   This command will compare the contents of two files. It will return 'True' if
   they are identical and 'False' otherwise.
   
   positional arguments:
     file1       first file
     file2       second file
   
   optional arguments:
     -h, --help  show this help message and exit

fuc_demux
=========

.. code-block:: console

   $ fuc fuc_demux -h
   usage: fuc fuc_demux [-h] reports_dir output_dir
   
   This command will parse the Reports directory from the bcl2fastq or bcl2fastq2
   prograrm. In the output directory, the command will create four files:
   flowcell_summary.csv, lane_summary.csv, top_unknown_barcodes.csv, and
   reports.pdf.
   
   positional arguments:
     reports_dir  Reports directory
     output_dir   output directory
   
   optional arguments:
     -h, --help   show this help message and exit

fuc_exist
=========

.. code-block:: console

   $ fuc fuc_exist -h
   usage: fuc fuc_exist [-h] [paths ...]
   
   This command will check whether files/dirs exist. It will return 'True' if
   they exist and 'False' otherwise. The command will look for stdin if there are
   no arguments (e.g. $ cat files.list | fuc fuc_exist).
   
   positional arguments:
     paths       file/dir paths (default: stdin)
   
   optional arguments:
     -h, --help  show this help message and exit

fuc_find
========

.. code-block:: console

   $ fuc fuc_find -h
   usage: fuc fuc_find [-h] path extension
   
   This command will recursively find files with a certain extension -- such as
   '.txt' and '.vcf' -- withinthe given directory and return their absolute
   paths.
   
   positional arguments:
     path        directory path
     extension   extension
   
   optional arguments:
     -h, --help  show this help message and exit

maf_maf2vcf
===========

.. code-block:: console

   $ fuc maf_maf2vcf -h
   usage: fuc maf_maf2vcf [-h] [--fasta PATH] [--ignore_indels] maf
   
   This command will convert a MAF file to a VCF file.
   
   positional arguments:
     maf              MAF file
   
   optional arguments:
     -h, --help       show this help message and exit
     --fasta PATH     FASTA file
     --ignore_indels  use this tag to exclude INDELs from the output

maf_oncoplt
===========

.. code-block:: console

   $ fuc maf_oncoplt -h
   usage: fuc maf_oncoplt [-h] [--count INTEGER] [--figsize FLOAT FLOAT]
                          [--label_fontsize FLOAT] [--ticklabels_fontsize FLOAT]
                          [--legend_fontsize FLOAT]
                          maf_file output_file
   
   This command will create an oncoplot from a MAF file. The format of output
   image (PDF/PNG/JPEG/SVG) will be automatically determined by the output file's
   extension. This command essentially wraps the `pymaf.plot_oncoplot` method.
   Visit the method's documentation (https://sbslee-
   fuc.readthedocs.io/en/latest/api.html#fuc.api.pymaf.MafFrame.plot_oncoplot) to
   see example plots.
   
   positional arguments:
     maf_file              input MAF file
     output_file           output inage file
   
   optional arguments:
     -h, --help            show this help message and exit
     --count INTEGER       number of top mutated genes to display (default: 10)
     --figsize FLOAT FLOAT
                           width, height in inches (default: [15, 10])
     --label_fontsize FLOAT
                           font size of labels (default: 15)
     --ticklabels_fontsize FLOAT
                           font size of tick labels (default: 15)
     --legend_fontsize FLOAT
                           font size of legend texts (default: 15)

maf_sumplt
==========

.. code-block:: console

   $ fuc maf_sumplt -h
   usage: fuc maf_sumplt [-h] [--figsize FLOAT FLOAT] [--title_fontsize FLOAT]
                         [--ticklabels_fontsize FLOAT] [--legend_fontsize FLOAT]
                         maf_file output_file
   
   This command will create a summary plot for a MAF file. The format of output
   image (PDF/PNG/JPEG/SVG) will be automatically determined by the output file's
   extension. This command essentially wraps the `pymaf.plot_summary` method.
   Visit the method's documentation (https://sbslee-
   fuc.readthedocs.io/en/latest/api.html#fuc.api.pymaf.MafFrame.plot_summary) to
   see example plots.
   
   positional arguments:
     maf_file              input MAF file
     output_file           output image file
   
   optional arguments:
     -h, --help            show this help message and exit
     --figsize FLOAT FLOAT
                           width, height in inches (default: [15, 10])
     --title_fontsize FLOAT
                           font size of subplot titles (default: 16)
     --ticklabels_fontsize FLOAT
                           font size of tick labels (default: 12)
     --legend_fontsize FLOAT
                           font size of legend texts (default: 12)

maf_vcf2maf
===========

.. code-block:: console

   $ fuc maf_vcf2maf -h
   usage: fuc maf_vcf2maf [-h] vcf_file
   
   This command will convert an annotated VCF file to a MAF file.
   
   positional arguments:
     vcf_file    annotated VCF file
   
   optional arguments:
     -h, --help  show this help message and exit

tbl_merge
=========

.. code-block:: console

   $ fuc tbl_merge -h
   usage: fuc tbl_merge [-h] [--how TEXT] [--on TEXT [TEXT ...]]
                        [--left_delimiter TEXT] [--right_delimiter TEXT]
                        [--output_delimiter TEXT]
                        left_file right_file
   
   This command will merge two table files using one or more shared columns. This
   essentially wraps the `pandas.DataFrame.merge` method.
   
   positional arguments:
     left_file             left table file
     right_file            right table file
   
   optional arguments:
     -h, --help            show this help message and exit
     --how TEXT            type of merge to be performed ['left', 'right',
                           'outer', 'inner', 'cross'] (default: 'inner')
     --on TEXT [TEXT ...]  column names to join on
     --left_delimiter TEXT
                           left delimiter (default: '\t')
     --right_delimiter TEXT
                           right delimiter (default: '\t')
     --output_delimiter TEXT
                           output delimiter (default: '\t')

tbl_sum
=======

.. code-block:: console

   $ fuc tbl_sum -h
   usage: fuc tbl_sum [-h] [--delimiter TEXT] [--skiprows TEXT]
                      [--na_values TEXT [TEXT ...]] [--keep_default_na]
                      [--query TEXT] [--columns TEXT [TEXT ...]]
                      table_file
   
   This command will summarize a table file. It essentially wraps the
   `pandas.Series.describe` and `pandas.Series.value_counts` methods.
   
   positional arguments:
     table_file            table file
   
   optional arguments:
     -h, --help            show this help message and exit
     --delimiter TEXT      delimiter (default: '\t')
     --skiprows TEXT       comma-separated line numbers to skip (0-indexed) or
                           number of lines to skip at the start of the file (e.g.
                           `--skiprows 1,` will skip the second line, `--skiprows
                           2,4` will skip the third and fifth lines, and
                           `--skiprows 10` will skip the first 10 lines)
     --na_values TEXT [TEXT ...]
                           additional strings to recognize as NA/NaN (by default,
                           the following values are interpreted as NaN: '',
                           '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN',
                           '-NaN', '-nan', '1.#IND', '1.#QNAN', '<NA>', 'N/A',
                           'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null')
     --keep_default_na     whether or not to include the default NaN values when
                           parsing the data (see `pandas.read_table` for details)
     --query TEXT          query the columns of a pandas.DataFrame with a boolean
                           expression (e.g. `--query "A == 'yes'"`)
     --columns TEXT [TEXT ...]
                           columns to be summarized (by default, all columns will
                           be included)

vcf_merge
=========

.. code-block:: console

   $ fuc vcf_merge -h
   usage: fuc vcf_merge [-h] [--how TEXT] [--format TEXT] [--sort] [--collapse]
                        vcf_files [vcf_files ...]
   
   This command will merge multiple VCF files (both zipped and unzipped). By
   default, only the GT subfield of the FORMAT field will be included in the
   merged VCF. Use '--format' to include additional FORMAT subfields such as AD
   and DP.
   
   positional arguments:
     vcf_files      VCF files
   
   optional arguments:
     -h, --help     show this help message and exit
     --how TEXT     type of merge as defined in `pandas.DataFrame.merge`
                    (default: 'inner')
     --format TEXT  FORMAT subfields to be retained (e.g. 'GT:AD:DP') (default:
                    'GT')
     --sort         use this flag to turn off sorting of records (default: True)
     --collapse     use this flag to collapse duplicate records (default: False)

vcf_slice
=========

.. code-block:: console

   $ fuc vcf_slice -h
   usage: fuc vcf_slice [-h] [--start INTEGER] [--end INTEGER] vcf_file chrom
   
   This command will slice a VCF file (both zipped and unzipped).
   
   positional arguments:
     vcf_file         VCF file
     chrom            chromosome
   
   optional arguments:
     -h, --help       show this help message and exit
     --start INTEGER  start position
     --end INTEGER    end position

vcf_vcf2bed
===========

.. code-block:: console

   $ fuc vcf_vcf2bed -h
   usage: fuc vcf_vcf2bed [-h] vcf_file
   
   This command will convert a VCF file to a BED file.
   
   positional arguments:
     vcf_file    VCF file
   
   optional arguments:
     -h, --help  show this help message and exit

vcf_vep
=======

.. code-block:: console

   $ fuc vcf_vep -h
   usage: fuc vcf_vep [-h] [--opposite] [--as_zero] vcf expr
   
   This command will filter a VCF file annotated by Ensemble VEP. It essentially wraps the `pandas.DataFrame.query` method. For details on query expression, please visit the method's documentation page (https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html#pandas-dataframe-query).
   
   examples:
     $ fuc vcf_vep in.vcf 'SYMBOL == "TP53"' > out.vcf
     $ fuc vcf_vep in.vcf 'SYMBOL != "TP53"' > out.vcf
     $ fuc vcf_vep in.vcf 'SYMBOL == "TP53"' --opposite > out.vcf
     $ fuc vcf_vep in.vcf 'Consequence in ["splice_donor_variant", "stop_gained"]' > out.vcf
     $ fuc vcf_vep in.vcf '(SYMBOL == "TP53") and (Consequence.str.contains("stop_gained"))' > out.vcf
     $ fuc vcf_vep in.vcf 'gnomAD_AF < 0.001' > out.vcf
     $ fuc vcf_vep in.vcf 'gnomAD_AF < 0.001' --as_zero > out.vcf
   
   positional arguments:
     vcf         Ensemble VEP-annotated VCF file
     expr        query expression to evaluate
   
   optional arguments:
     -h, --help  show this help message and exit
     --opposite  use this flag to return records that don’t meet the said criteria
     --as_zero   use this flag to treat missing values as zero instead of NaN

