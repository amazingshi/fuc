..
   This file was automatically generated by docs/create.py.

CLI
***

Introduction
============

This section describes command line interface (CLI) for the fuc package.

For getting help on CLI:

.. code-block:: console

   $ fuc -h
   usage: fuc [-h] [-v] COMMAND ...
   
   positional arguments:
     COMMAND        name of the command
       bfintxn      [BED] find intersection of two or more BED files
       bfsum        [BED] summarize a BED file
       dfmerge      [TABLE] merge two table files
       dfsum        [TABLE] summarize a table file
       fuccompf     [FUC] compare contents of two files
       fucdemux     [FUC] parse Reports directory from bcl2fastq or bcl2fastq2
       fucexist     [FUC] check whether files/dirs exist
       fucfind      [FUC] find files with certain extension recursively
       qfcount      [FASTQ] count sequence reads in FASTQ files
       qfsum        [FASTQ] summarize a FASTQ file
       vfmerge      [VCF] merge two or more VCF files
       vfslice      [VCF] slice a VCF file
   
   optional arguments:
     -h, --help     show this help message and exit
     -v, --version  show the version number and exit

For getting help on a specific command (e.g. vfmerge):

.. code-block:: console

   $ fuc vfmerge -h

bfintxn
=======

.. code-block:: console

   $ fuc bfintxn -h
   usage: fuc bfintxn [-h] bed_files [bed_files ...]
   
   This command will compute intersections beween multiple BED files. It
   essentially wraps the `pyranges.PyRanges.intersect` method.
   
   positional arguments:
     bed_files   BED files
   
   optional arguments:
     -h, --help  show this help message and exit

bfsum
=====

.. code-block:: console

   $ fuc bfsum -h
   usage: fuc bfsum [-h] [--bases INTEGER] [--decimals INTEGER] bed_file
   
   This command will compute summary statstics of the BED file. This includes the
   total numbers of probes and covered base pairs for each chromosome. By
   default, covered base paris are displayed in bp, but if you prefer you can,
   for example, use '--bases 1000' to display base pairs in kb.
   
   positional arguments:
     bed_file            input BED file
   
   optional arguments:
     -h, --help          show this help message and exit
     --bases INTEGER     number used to divide the bases (default: 1)
     --decimals INTEGER  maximum number of decimals (default: 0)

dfmerge
=======

.. code-block:: console

   $ fuc dfmerge -h
   usage: fuc dfmerge [-h] [--how TEXT] [--on TEXT [TEXT ...]]
                      [--left_delimiter TEXT] [--right_delimiter TEXT]
                      [--output_delimiter TEXT]
                      left_file right_file
   
   This command will merge two table files using one or more shared columns. This
   essentially wraps the `pandas.DataFrame.merge` method.
   
   positional arguments:
     left_file             left table file
     right_file            right table file
   
   optional arguments:
     -h, --help            show this help message and exit
     --how TEXT            type of merge to be performed ['left', 'right',
                           'outer', 'inner', 'cross'] (default: 'inner')
     --on TEXT [TEXT ...]  column names to join on
     --left_delimiter TEXT
                           left delimiter (default: '\t')
     --right_delimiter TEXT
                           right delimiter (default: '\t')
     --output_delimiter TEXT
                           output delimiter (default: '\t')

dfsum
=====

.. code-block:: console

   $ fuc dfsum -h
   usage: fuc dfsum [-h] [--delimiter TEXT] [--skiprows TEXT]
                    [--na_values TEXT [TEXT ...]] [--keep_default_na]
                    [--query TEXT] [--columns TEXT [TEXT ...]]
                    table_file
   
   This command will summarize a table file. It essentially wraps the
   `pandas.Series.describe` and `pandas.Series.value_counts` methods.
   
   positional arguments:
     table_file            table file
   
   optional arguments:
     -h, --help            show this help message and exit
     --delimiter TEXT      delimiter (default: '\t')
     --skiprows TEXT       comma-separated line numbers to skip (0-indexed) or
                           number of lines to skip at the start of the file (e.g.
                           `--skiprows 1,` will skip the second line, `--skiprows
                           2,4` will skip the third and fifth lines, and
                           `--skiprows 10` will skip the first 10 lines)
     --na_values TEXT [TEXT ...]
                           additional strings to recognize as NA/NaN (by default,
                           the following values are interpreted as NaN: '',
                           '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN',
                           '-NaN', '-nan', '1.#IND', '1.#QNAN', '<NA>', 'N/A',
                           'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null')
     --keep_default_na     whether or not to include the default NaN values when
                           parsing the data (see `pandas.read_table` for details)
     --query TEXT          query the columns of a pandas.DataFrame with a boolean
                           expression (e.g. `--query "A == 'yes'"`)
     --columns TEXT [TEXT ...]
                           columns to be summarized (by default, all columns will
                           be included)

fuccompf
========

.. code-block:: console

   $ fuc fuccompf -h
   usage: fuc fuccompf [-h] file1 file2
   
   This command will compare the contents of two files. It will return 'True' if
   they are identical and 'False' otherwise.
   
   positional arguments:
     file1       first file
     file2       second file
   
   optional arguments:
     -h, --help  show this help message and exit

fucdemux
========

.. code-block:: console

   $ fuc fucdemux -h
   usage: fuc fucdemux [-h] reports_dir output_dir
   
   This command will parse the Reports directory from the bcl2fastq or bcl2fastq2
   prograrm. In the output directory, the command will create four files:
   flowcell_summary.csv, lane_summary.csv, top_unknown_barcodes.csv, and
   reports.pdf.
   
   positional arguments:
     reports_dir  Reports directory
     output_dir   output directory
   
   optional arguments:
     -h, --help   show this help message and exit

fucexist
========

.. code-block:: console

   $ fuc fucexist -h
   usage: fuc fucexist [-h] [paths ...]
   
   This command will check whether files/dirs exist. It will return 'True' if
   they exist and 'False' otherwise. The command will look for stdin if there are
   no arguments (e.g. $ cat files.list | fuc fucexist).
   
   positional arguments:
     paths       file/dir paths (default: stdin)
   
   optional arguments:
     -h, --help  show this help message and exit

fucfind
=======

.. code-block:: console

   $ fuc fucfind -h
   usage: fuc fucfind [-h] path extension
   
   This command will recursively find files with a certain extension -- such as
   '.txt' and '.vcf' -- within the given directory and return their absolute
   paths.
   
   positional arguments:
     path        directory path
     extension   extension
   
   optional arguments:
     -h, --help  show this help message and exit

qfcount
=======

.. code-block:: console

   $ fuc qfcount -h
   usage: fuc qfcount [-h] [paths ...]
   
   This command will count sequence reads in FASTQ files (both zipped and
   unzipped). It will look for stdin if there are no arguments (e.g. $ cat
   files.list | fuc qfcount).
   
   positional arguments:
     paths       FASTQ file paths (default: stdin)
   
   optional arguments:
     -h, --help  show this help message and exit

qfsum
=====

.. code-block:: console

   $ fuc qfsum -h
   usage: fuc qfsum [-h] fastq_file
   
   This command will output a summary of the input FASTQ file (both zipped and
   unqzipped). The summary includes the total number of sequence reads, the
   distribution of read lengths, and the numbers of unique and duplicate
   sequences.
   
   positional arguments:
     fastq_file  input FASTQ file
   
   optional arguments:
     -h, --help  show this help message and exit

vfmerge
=======

.. code-block:: console

   $ fuc vfmerge -h
   usage: fuc vfmerge [-h] [--how TEXT] [--format TEXT] [--sort] [--collapse]
                      vcf_files [vcf_files ...]
   
   This command will merge multiple VCF files (both zipped and unzipped). By
   default, only the GT subfield of the FORMAT field will be included in the
   merged VCF. Use '--format' to include additional FORMAT subfields such as AD
   and DP.
   
   positional arguments:
     vcf_files      VCF files
   
   optional arguments:
     -h, --help     show this help message and exit
     --how TEXT     type of merge as defined in `pandas.DataFrame.merge`
                    (default: 'inner')
     --format TEXT  FORMAT subfields to be retained (e.g. 'GT:AD:DP') (default:
                    'GT')
     --sort         use this flag to turn off sorting of records (default: True)
     --collapse     use this flag to collapse duplicate records (default: False)

vfslice
=======

.. code-block:: console

   $ fuc vfslice -h
   usage: fuc vfslice [-h] [--start INTEGER] [--end INTEGER] vcf_file chrom
   
   This command will slice a VCF file (both zipped and unzipped).
   
   positional arguments:
     vcf_file         VCF file
     chrom            chromosome
   
   optional arguments:
     -h, --help       show this help message and exit
     --start INTEGER  start position
     --end INTEGER    end position

